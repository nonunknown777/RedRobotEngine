# # SConstruct

# Set the C++ version to C++17
env = Environment(CXXFLAGS='-std=c++20 -g -Wall -Werror ', tools=['default', 'g++'])

program_name = 'zengine-'
# Define DEBUG or RELEASE based on the target
if ARGUMENTS.get('target') == 'debug':
    program_name += 'debug'
    env.Append(CPPDEFINES=['DEBUG'])
    env.Append(CXXFLAGS='-g -Og')  # Add debug information
else:
    program_name += 'release'
    env.Append(CPPDEFINES=['RELEASE'])
    env.Append(CXXFLAGS='-O3')  # Add optimization level for release

# Include directories
env.Append(CPPPATH=[Glob('includes/**'),'src/includes/'])

# Source files
src_files = Glob('src/**/*.cpp')
references_files = Glob('references/**/*.cpp')
# Libs directory
env.Append(LIBPATH=['libs'])

# Link against libraylib.a
env.Append(LIBS=['raylib'])

# Build the executable
env.Program(target=program_name, source=['src/main.cpp'] + src_files)

# SConstruct

# # Set the C++ version to C++20
# env = Environment(CXXFLAGS='-std=c++20 -g -Wall -Werror ', tools=['default', 'g++'])

# # Define DEBUG when needed
# env.Append(CPPDEFINES=['DEBUG'])  # Add this line if you want DEBUG defined

# # Include directories
# includes_folders = [
#     'includes',
#     'includes/imgui',
#     'includes/raylib',
#     'includes/rl_imgui',
#     'includes/rl_imgui/extras',
#     'includes/rres',
#     'includes/rres/external',
#     'src/includes'
# ]

# env.Append(CPPPATH=Flatten([Glob('{}/**'.format(folder)) for folder in includes_folders]))

# # Source files
# src_folders = ['src', 'src/includes', 'src/nodes']

# # Collect source files using Glob
# src_files = Flatten([Glob('{}/*.cpp {}/*.h {}/*.hpp'.format(folder, folder, folder)) for folder in src_folders])

# # Build the executable
# env.Program(target='my_project', source=src_files + ['src/main.cpp'])
